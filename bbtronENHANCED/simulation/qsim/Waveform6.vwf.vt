// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2017 23:43:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          controlUnity
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlUnity_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] opcode;
// wires                                               
wire cu_Branch;
wire cu_Jump;
wire cu_aluOp;
wire cu_aluScr;
wire cu_hlt;
wire cu_inSignal;
wire cu_memtoReg;
wire cu_readEnable;
wire cu_regDest;
wire cu_reset;
wire cu_writeEnable;
wire cu_writeReg;

// assign statements (if any)                          
controlUnity i1 (
// port map - connection between master ports and signals/registers   
	.cu_Branch(cu_Branch),
	.cu_Jump(cu_Jump),
	.cu_aluOp(cu_aluOp),
	.cu_aluScr(cu_aluScr),
	.cu_hlt(cu_hlt),
	.cu_inSignal(cu_inSignal),
	.cu_memtoReg(cu_memtoReg),
	.cu_readEnable(cu_readEnable),
	.cu_regDest(cu_regDest),
	.cu_reset(cu_reset),
	.cu_writeEnable(cu_writeEnable),
	.cu_writeReg(cu_writeReg),
	.opcode(opcode)
);
initial 
begin 
#1000000 $finish;
end 
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
	opcode[4] = #616000 1'b1;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
	opcode[3] = #308000 1'b1;
	opcode[3] = #308000 1'b0;
	opcode[3] = #308000 1'b1;
end 
// opcode[ 2 ]
initial
begin
	repeat(3)
	begin
		opcode[2] = 1'b0;
		opcode[2] = #154000 1'b1;
		# 154000;
	end
	opcode[2] = 1'b0;
end 
// opcode[ 1 ]
initial
begin
	repeat(6)
	begin
		opcode[1] = 1'b0;
		opcode[1] = #77000 1'b1;
		# 77000;
	end
	opcode[1] = 1'b0;
end 
// opcode[ 0 ]
initial
begin
	repeat(12)
	begin
		opcode[0] = 1'b0;
		opcode[0] = #38500 1'b1;
		# 38500;
	end
	opcode[0] = 1'b0;
	opcode[0] = #38500 1'b1;
end 
endmodule


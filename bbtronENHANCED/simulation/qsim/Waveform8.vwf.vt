// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2017 20:31:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          muxJump
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module muxJump_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cu_Jump;
reg [31:0] muxPCScr;
reg [31:0] signExtenderJ;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
muxJump i1 (
// port map - connection between master ports and signals/registers   
	.cu_Jump(cu_Jump),
	.muxPCScr(muxPCScr),
	.out(out),
	.signExtenderJ(signExtenderJ)
);
initial 
begin 
#1000000 $finish;
end 

// cu_Jump
initial
begin
	cu_Jump = 1'b0;
	cu_Jump = #180000 1'b1;
	cu_Jump = #110000 1'b0;
end 
// muxPCScr[ 31 ]
initial
begin
	muxPCScr[31] = 1'b1;
end 
// muxPCScr[ 30 ]
initial
begin
	muxPCScr[30] = 1'b1;
end 
// muxPCScr[ 29 ]
initial
begin
	muxPCScr[29] = 1'b1;
end 
// muxPCScr[ 28 ]
initial
begin
	muxPCScr[28] = 1'b1;
end 
// muxPCScr[ 27 ]
initial
begin
	muxPCScr[27] = 1'b1;
end 
// muxPCScr[ 26 ]
initial
begin
	muxPCScr[26] = 1'b1;
end 
// muxPCScr[ 25 ]
initial
begin
	muxPCScr[25] = 1'b1;
end 
// muxPCScr[ 24 ]
initial
begin
	muxPCScr[24] = 1'b1;
end 
// muxPCScr[ 23 ]
initial
begin
	muxPCScr[23] = 1'b1;
end 
// muxPCScr[ 22 ]
initial
begin
	muxPCScr[22] = 1'b1;
end 
// muxPCScr[ 21 ]
initial
begin
	muxPCScr[21] = 1'b1;
end 
// muxPCScr[ 20 ]
initial
begin
	muxPCScr[20] = 1'b1;
end 
// muxPCScr[ 19 ]
initial
begin
	muxPCScr[19] = 1'b1;
end 
// muxPCScr[ 18 ]
initial
begin
	muxPCScr[18] = 1'b1;
end 
// muxPCScr[ 17 ]
initial
begin
	muxPCScr[17] = 1'b1;
end 
// muxPCScr[ 16 ]
initial
begin
	muxPCScr[16] = 1'b1;
end 
// muxPCScr[ 15 ]
initial
begin
	muxPCScr[15] = 1'b1;
end 
// muxPCScr[ 14 ]
initial
begin
	muxPCScr[14] = 1'b1;
end 
// muxPCScr[ 13 ]
initial
begin
	muxPCScr[13] = 1'b1;
end 
// muxPCScr[ 12 ]
initial
begin
	muxPCScr[12] = 1'b1;
end 
// muxPCScr[ 11 ]
initial
begin
	muxPCScr[11] = 1'b1;
end 
// muxPCScr[ 10 ]
initial
begin
	muxPCScr[10] = 1'b1;
end 
// muxPCScr[ 9 ]
initial
begin
	muxPCScr[9] = 1'b1;
end 
// muxPCScr[ 8 ]
initial
begin
	muxPCScr[8] = 1'b1;
end 
// muxPCScr[ 7 ]
initial
begin
	muxPCScr[7] = 1'b1;
end 
// muxPCScr[ 6 ]
initial
begin
	muxPCScr[6] = 1'b1;
end 
// muxPCScr[ 5 ]
initial
begin
	muxPCScr[5] = 1'b1;
end 
// muxPCScr[ 4 ]
initial
begin
	muxPCScr[4] = 1'b1;
end 
// muxPCScr[ 3 ]
initial
begin
	muxPCScr[3] = 1'b1;
end 
// muxPCScr[ 2 ]
initial
begin
	muxPCScr[2] = 1'b1;
end 
// muxPCScr[ 1 ]
initial
begin
	muxPCScr[1] = 1'b1;
end 
// muxPCScr[ 0 ]
initial
begin
	muxPCScr[0] = 1'b1;
end 
// signExtenderJ[ 31 ]
initial
begin
	signExtenderJ[31] = 1'b1;
end 
// signExtenderJ[ 30 ]
initial
begin
	signExtenderJ[30] = 1'b1;
end 
// signExtenderJ[ 29 ]
initial
begin
	signExtenderJ[29] = 1'b1;
end 
// signExtenderJ[ 28 ]
initial
begin
	signExtenderJ[28] = 1'b1;
end 
// signExtenderJ[ 27 ]
initial
begin
	signExtenderJ[27] = 1'b0;
end 
// signExtenderJ[ 26 ]
initial
begin
	signExtenderJ[26] = 1'b0;
end 
// signExtenderJ[ 25 ]
initial
begin
	signExtenderJ[25] = 1'b0;
end 
// signExtenderJ[ 24 ]
initial
begin
	signExtenderJ[24] = 1'b0;
end 
// signExtenderJ[ 23 ]
initial
begin
	signExtenderJ[23] = 1'b0;
end 
// signExtenderJ[ 22 ]
initial
begin
	signExtenderJ[22] = 1'b0;
end 
// signExtenderJ[ 21 ]
initial
begin
	signExtenderJ[21] = 1'b0;
end 
// signExtenderJ[ 20 ]
initial
begin
	signExtenderJ[20] = 1'b0;
end 
// signExtenderJ[ 19 ]
initial
begin
	signExtenderJ[19] = 1'b0;
end 
// signExtenderJ[ 18 ]
initial
begin
	signExtenderJ[18] = 1'b0;
end 
// signExtenderJ[ 17 ]
initial
begin
	signExtenderJ[17] = 1'b0;
end 
// signExtenderJ[ 16 ]
initial
begin
	signExtenderJ[16] = 1'b0;
end 
// signExtenderJ[ 15 ]
initial
begin
	signExtenderJ[15] = 1'b0;
end 
// signExtenderJ[ 14 ]
initial
begin
	signExtenderJ[14] = 1'b0;
end 
// signExtenderJ[ 13 ]
initial
begin
	signExtenderJ[13] = 1'b0;
end 
// signExtenderJ[ 12 ]
initial
begin
	signExtenderJ[12] = 1'b0;
end 
// signExtenderJ[ 11 ]
initial
begin
	signExtenderJ[11] = 1'b0;
end 
// signExtenderJ[ 10 ]
initial
begin
	signExtenderJ[10] = 1'b0;
end 
// signExtenderJ[ 9 ]
initial
begin
	signExtenderJ[9] = 1'b0;
end 
// signExtenderJ[ 8 ]
initial
begin
	signExtenderJ[8] = 1'b0;
end 
// signExtenderJ[ 7 ]
initial
begin
	signExtenderJ[7] = 1'b0;
end 
// signExtenderJ[ 6 ]
initial
begin
	signExtenderJ[6] = 1'b0;
end 
// signExtenderJ[ 5 ]
initial
begin
	signExtenderJ[5] = 1'b0;
end 
// signExtenderJ[ 4 ]
initial
begin
	signExtenderJ[4] = 1'b0;
end 
// signExtenderJ[ 3 ]
initial
begin
	signExtenderJ[3] = 1'b0;
end 
// signExtenderJ[ 2 ]
initial
begin
	signExtenderJ[2] = 1'b0;
end 
// signExtenderJ[ 1 ]
initial
begin
	signExtenderJ[1] = 1'b0;
end 
// signExtenderJ[ 0 ]
initial
begin
	signExtenderJ[0] = 1'b0;
end 
endmodule


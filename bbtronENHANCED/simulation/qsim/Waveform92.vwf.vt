// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2018 19:57:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bbtronenhancedCPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bbtronenhancedCPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg auto_clock;
reg enterButton;
reg reset;
reg [15:0] switches;
// wires                                               
wire wire_negative;
wire [6:0] wire_out1;
wire [6:0] wire_out2;
wire [6:0] wire_out3;

// assign statements (if any)                          
bbtronenhancedCPU i1 (
// port map - connection between master ports and signals/registers   
	.auto_clock(auto_clock),
	.enterButton(enterButton),
	.reset(reset),
	.switches(switches),
	.wire_negative(wire_negative),
	.wire_out1(wire_out1),
	.wire_out2(wire_out2),
	.wire_out3(wire_out3)
);
initial 
begin 
#1000000 $finish;
end 

// auto_clock
initial
begin
	auto_clock = 1'b1;
	# 5000;
	repeat(99)
	begin
		auto_clock = 1'b0;
		auto_clock = #5000 1'b1;
		# 5000;
	end
	auto_clock = 1'b0;
end 

// enterButton
initial
begin
	enterButton = 1'b0;
	enterButton = #220000 1'b1;
	enterButton = #50000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b1;
end 
endmodule


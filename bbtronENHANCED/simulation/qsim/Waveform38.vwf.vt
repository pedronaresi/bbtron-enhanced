// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2017 18:14:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          registerBench
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registerBench_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg cu_writeReg;
reg [4:0] readAddy1;
reg [4:0] readAddy2;
reg [4:0] writeAddy;
reg [31:0] writeData;
// wires                                               
wire [31:0] data1;
wire [31:0] data2;
wire [31:0] data3;

// assign statements (if any)                          
registerBench i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.cu_writeReg(cu_writeReg),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.readAddy1(readAddy1),
	.readAddy2(readAddy2),
	.writeAddy(writeAddy),
	.writeData(writeData)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #170000 1'b1;
	clock = #150000 1'b0;
	clock = #210000 1'b1;
	clock = #190000 1'b0;
end 

// cu_writeReg
initial
begin
	cu_writeReg = 1'b0;
end 
// readAddy1[ 4 ]
initial
begin
	readAddy1[4] = 1'b0;
end 
// readAddy1[ 3 ]
initial
begin
	readAddy1[3] = 1'b0;
end 
// readAddy1[ 2 ]
initial
begin
	readAddy1[2] = 1'b0;
end 
// readAddy1[ 1 ]
initial
begin
	readAddy1[1] = 1'b0;
end 
// readAddy1[ 0 ]
initial
begin
	readAddy1[0] = 1'b1;
	readAddy1[0] = #320000 1'b0;
end 
// readAddy2[ 4 ]
initial
begin
	readAddy2[4] = 1'b0;
end 
// readAddy2[ 3 ]
initial
begin
	readAddy2[3] = 1'b0;
end 
// readAddy2[ 2 ]
initial
begin
	readAddy2[2] = 1'b0;
end 
// readAddy2[ 1 ]
initial
begin
	readAddy2[1] = 1'b0;
end 
// readAddy2[ 0 ]
initial
begin
	readAddy2[0] = 1'b0;
end 
// writeAddy[ 4 ]
initial
begin
	writeAddy[4] = 1'b0;
end 
// writeAddy[ 3 ]
initial
begin
	writeAddy[3] = 1'b0;
end 
// writeAddy[ 2 ]
initial
begin
	writeAddy[2] = 1'b0;
end 
// writeAddy[ 1 ]
initial
begin
	writeAddy[1] = 1'b0;
end 
// writeAddy[ 0 ]
initial
begin
	writeAddy[0] = 1'b0;
end 
// writeData[ 31 ]
initial
begin
	writeData[31] = 1'b0;
end 
// writeData[ 30 ]
initial
begin
	writeData[30] = 1'b0;
end 
// writeData[ 29 ]
initial
begin
	writeData[29] = 1'b0;
end 
// writeData[ 28 ]
initial
begin
	writeData[28] = 1'b0;
end 
// writeData[ 27 ]
initial
begin
	writeData[27] = 1'b0;
end 
// writeData[ 26 ]
initial
begin
	writeData[26] = 1'b0;
end 
// writeData[ 25 ]
initial
begin
	writeData[25] = 1'b0;
end 
// writeData[ 24 ]
initial
begin
	writeData[24] = 1'b0;
end 
// writeData[ 23 ]
initial
begin
	writeData[23] = 1'b0;
end 
// writeData[ 22 ]
initial
begin
	writeData[22] = 1'b0;
end 
// writeData[ 21 ]
initial
begin
	writeData[21] = 1'b0;
end 
// writeData[ 20 ]
initial
begin
	writeData[20] = 1'b0;
end 
// writeData[ 19 ]
initial
begin
	writeData[19] = 1'b0;
end 
// writeData[ 18 ]
initial
begin
	writeData[18] = 1'b0;
end 
// writeData[ 17 ]
initial
begin
	writeData[17] = 1'b0;
end 
// writeData[ 16 ]
initial
begin
	writeData[16] = 1'b0;
end 
// writeData[ 15 ]
initial
begin
	writeData[15] = 1'b0;
end 
// writeData[ 14 ]
initial
begin
	writeData[14] = 1'b0;
end 
// writeData[ 13 ]
initial
begin
	writeData[13] = 1'b0;
end 
// writeData[ 12 ]
initial
begin
	writeData[12] = 1'b0;
end 
// writeData[ 11 ]
initial
begin
	writeData[11] = 1'b0;
end 
// writeData[ 10 ]
initial
begin
	writeData[10] = 1'b0;
end 
// writeData[ 9 ]
initial
begin
	writeData[9] = 1'b0;
end 
// writeData[ 8 ]
initial
begin
	writeData[8] = 1'b0;
end 
// writeData[ 7 ]
initial
begin
	writeData[7] = 1'b0;
end 
// writeData[ 6 ]
initial
begin
	writeData[6] = 1'b0;
end 
// writeData[ 5 ]
initial
begin
	writeData[5] = 1'b0;
end 
// writeData[ 4 ]
initial
begin
	writeData[4] = 1'b0;
end 
// writeData[ 3 ]
initial
begin
	writeData[3] = 1'b0;
end 
// writeData[ 2 ]
initial
begin
	writeData[2] = 1'b0;
end 
// writeData[ 1 ]
initial
begin
	writeData[1] = 1'b0;
end 
// writeData[ 0 ]
initial
begin
	writeData[0] = 1'b0;
end 
endmodule


// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2017 22:01:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          teste
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module teste_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg wire_cu_writeReg;
reg [15:0] wire_outAddy;
reg [31:0] wire_out_memtoreg;
reg [4:0] wire_out_regdest;
// wires                                               
wire [31:0] wire_RAMOutput;
wire [31:0] wire_data1;
wire [31:0] wire_data2;
wire [31:0] wire_data3;

// assign statements (if any)                          
teste i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.wire_RAMOutput(wire_RAMOutput),
	.wire_cu_writeReg(wire_cu_writeReg),
	.wire_data1(wire_data1),
	.wire_data2(wire_data2),
	.wire_data3(wire_data3),
	.wire_outAddy(wire_outAddy),
	.wire_out_memtoreg(wire_out_memtoreg),
	.wire_out_regdest(wire_out_regdest)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	# 150000;
	repeat(2)
	begin
		clock = 1'b0;
		clock = #150000 1'b1;
		# 150000;
	end
	clock = 1'b0;
	clock = #150000 1'b1;
end 

// wire_cu_writeReg
initial
begin
	wire_cu_writeReg = 1'b0;
end 
// wire_outAddy[ 15 ]
initial
begin
	wire_outAddy[15] = 1'b0;
end 
// wire_outAddy[ 14 ]
initial
begin
	wire_outAddy[14] = 1'b0;
end 
// wire_outAddy[ 13 ]
initial
begin
	wire_outAddy[13] = 1'b0;
end 
// wire_outAddy[ 12 ]
initial
begin
	wire_outAddy[12] = 1'b0;
end 
// wire_outAddy[ 11 ]
initial
begin
	wire_outAddy[11] = 1'b0;
end 
// wire_outAddy[ 10 ]
initial
begin
	wire_outAddy[10] = 1'b0;
end 
// wire_outAddy[ 9 ]
initial
begin
	wire_outAddy[9] = 1'b0;
end 
// wire_outAddy[ 8 ]
initial
begin
	wire_outAddy[8] = 1'b0;
end 
// wire_outAddy[ 7 ]
initial
begin
	wire_outAddy[7] = 1'b0;
end 
// wire_outAddy[ 6 ]
initial
begin
	wire_outAddy[6] = 1'b0;
end 
// wire_outAddy[ 5 ]
initial
begin
	wire_outAddy[5] = 1'b0;
end 
// wire_outAddy[ 4 ]
initial
begin
	wire_outAddy[4] = 1'b0;
end 
// wire_outAddy[ 3 ]
initial
begin
	wire_outAddy[3] = 1'b0;
end 
// wire_outAddy[ 2 ]
initial
begin
	wire_outAddy[2] = 1'b0;
end 
// wire_outAddy[ 1 ]
initial
begin
	wire_outAddy[1] = 1'b0;
end 
// wire_outAddy[ 0 ]
initial
begin
	wire_outAddy[0] = 1'b1;
	wire_outAddy[0] = #300000 1'b0;
end 
// wire_out_memtoreg[ 31 ]
initial
begin
	wire_out_memtoreg[31] = 1'b0;
end 
// wire_out_memtoreg[ 30 ]
initial
begin
	wire_out_memtoreg[30] = 1'b0;
end 
// wire_out_memtoreg[ 29 ]
initial
begin
	wire_out_memtoreg[29] = 1'b0;
end 
// wire_out_memtoreg[ 28 ]
initial
begin
	wire_out_memtoreg[28] = 1'b0;
end 
// wire_out_memtoreg[ 27 ]
initial
begin
	wire_out_memtoreg[27] = 1'b0;
end 
// wire_out_memtoreg[ 26 ]
initial
begin
	wire_out_memtoreg[26] = 1'b0;
end 
// wire_out_memtoreg[ 25 ]
initial
begin
	wire_out_memtoreg[25] = 1'b0;
end 
// wire_out_memtoreg[ 24 ]
initial
begin
	wire_out_memtoreg[24] = 1'b0;
end 
// wire_out_memtoreg[ 23 ]
initial
begin
	wire_out_memtoreg[23] = 1'b0;
end 
// wire_out_memtoreg[ 22 ]
initial
begin
	wire_out_memtoreg[22] = 1'b0;
end 
// wire_out_memtoreg[ 21 ]
initial
begin
	wire_out_memtoreg[21] = 1'b0;
end 
// wire_out_memtoreg[ 20 ]
initial
begin
	wire_out_memtoreg[20] = 1'b0;
end 
// wire_out_memtoreg[ 19 ]
initial
begin
	wire_out_memtoreg[19] = 1'b0;
end 
// wire_out_memtoreg[ 18 ]
initial
begin
	wire_out_memtoreg[18] = 1'b0;
end 
// wire_out_memtoreg[ 17 ]
initial
begin
	wire_out_memtoreg[17] = 1'b0;
end 
// wire_out_memtoreg[ 16 ]
initial
begin
	wire_out_memtoreg[16] = 1'b0;
end 
// wire_out_memtoreg[ 15 ]
initial
begin
	wire_out_memtoreg[15] = 1'b0;
end 
// wire_out_memtoreg[ 14 ]
initial
begin
	wire_out_memtoreg[14] = 1'b0;
end 
// wire_out_memtoreg[ 13 ]
initial
begin
	wire_out_memtoreg[13] = 1'b0;
end 
// wire_out_memtoreg[ 12 ]
initial
begin
	wire_out_memtoreg[12] = 1'b0;
end 
// wire_out_memtoreg[ 11 ]
initial
begin
	wire_out_memtoreg[11] = 1'b0;
end 
// wire_out_memtoreg[ 10 ]
initial
begin
	wire_out_memtoreg[10] = 1'b0;
end 
// wire_out_memtoreg[ 9 ]
initial
begin
	wire_out_memtoreg[9] = 1'b0;
end 
// wire_out_memtoreg[ 8 ]
initial
begin
	wire_out_memtoreg[8] = 1'b0;
end 
// wire_out_memtoreg[ 7 ]
initial
begin
	wire_out_memtoreg[7] = 1'b0;
end 
// wire_out_memtoreg[ 6 ]
initial
begin
	wire_out_memtoreg[6] = 1'b0;
end 
// wire_out_memtoreg[ 5 ]
initial
begin
	wire_out_memtoreg[5] = 1'b0;
end 
// wire_out_memtoreg[ 4 ]
initial
begin
	wire_out_memtoreg[4] = 1'b0;
end 
// wire_out_memtoreg[ 3 ]
initial
begin
	wire_out_memtoreg[3] = 1'b0;
end 
// wire_out_memtoreg[ 2 ]
initial
begin
	wire_out_memtoreg[2] = 1'b0;
end 
// wire_out_memtoreg[ 1 ]
initial
begin
	wire_out_memtoreg[1] = 1'b0;
end 
// wire_out_memtoreg[ 0 ]
initial
begin
	wire_out_memtoreg[0] = 1'b0;
end 
// wire_out_regdest[ 4 ]
initial
begin
	wire_out_regdest[4] = 1'b0;
end 
// wire_out_regdest[ 3 ]
initial
begin
	wire_out_regdest[3] = 1'b0;
end 
// wire_out_regdest[ 2 ]
initial
begin
	wire_out_regdest[2] = 1'b0;
end 
// wire_out_regdest[ 1 ]
initial
begin
	wire_out_regdest[1] = 1'b0;
end 
// wire_out_regdest[ 0 ]
initial
begin
	wire_out_regdest[0] = 1'b0;
end 
endmodule


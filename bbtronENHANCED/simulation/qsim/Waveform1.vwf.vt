// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2017 19:44:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          signExtenderR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module signExtenderR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] inputA;
// wires                                               
wire [31:0] extenderOutputA;

// assign statements (if any)                          
signExtenderR i1 (
// port map - connection between master ports and signals/registers   
	.extenderOutputA(extenderOutputA),
	.inputA(inputA)
);
initial 
begin 
#1000000 $finish;
end 
// inputA[ 15 ]
initial
begin
	inputA[15] = 1'b0;
end 
// inputA[ 14 ]
initial
begin
	inputA[14] = 1'b0;
end 
// inputA[ 13 ]
initial
begin
	inputA[13] = 1'b0;
end 
// inputA[ 12 ]
initial
begin
	inputA[12] = 1'b0;
end 
// inputA[ 11 ]
initial
begin
	inputA[11] = 1'b0;
end 
// inputA[ 10 ]
initial
begin
	inputA[10] = 1'b0;
end 
// inputA[ 9 ]
initial
begin
	inputA[9] = 1'b0;
end 
// inputA[ 8 ]
initial
begin
	inputA[8] = 1'b0;
end 
// inputA[ 7 ]
initial
begin
	inputA[7] = 1'b0;
end 
// inputA[ 6 ]
initial
begin
	inputA[6] = 1'b0;
end 
// inputA[ 5 ]
initial
begin
	inputA[5] = 1'b0;
end 
// inputA[ 4 ]
initial
begin
	inputA[4] = 1'b0;
end 
// inputA[ 3 ]
initial
begin
	inputA[3] = 1'b0;
end 
// inputA[ 2 ]
initial
begin
	inputA[2] = 1'b0;
end 
// inputA[ 1 ]
initial
begin
	inputA[1] = 1'b1;
end 
// inputA[ 0 ]
initial
begin
	inputA[0] = 1'b0;
end 
endmodule


// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2017 20:36:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          muxALUScr
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module muxALUScr_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cu_aluScr;
reg [31:0] data2;
reg [31:0] extenderOutputA;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
muxALUScr i1 (
// port map - connection between master ports and signals/registers   
	.cu_aluScr(cu_aluScr),
	.data2(data2),
	.extenderOutputA(extenderOutputA),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 

// cu_aluScr
initial
begin
	cu_aluScr = 1'b0;
	cu_aluScr = #110000 1'b1;
	cu_aluScr = #60000 1'b0;
end 
// data2[ 31 ]
initial
begin
	data2[31] = 1'b0;
end 
// data2[ 30 ]
initial
begin
	data2[30] = 1'b0;
end 
// data2[ 29 ]
initial
begin
	data2[29] = 1'b0;
end 
// data2[ 28 ]
initial
begin
	data2[28] = 1'b0;
end 
// data2[ 27 ]
initial
begin
	data2[27] = 1'b0;
end 
// data2[ 26 ]
initial
begin
	data2[26] = 1'b1;
end 
// data2[ 25 ]
initial
begin
	data2[25] = 1'b0;
end 
// data2[ 24 ]
initial
begin
	data2[24] = 1'b0;
end 
// data2[ 23 ]
initial
begin
	data2[23] = 1'b0;
end 
// data2[ 22 ]
initial
begin
	data2[22] = 1'b0;
end 
// data2[ 21 ]
initial
begin
	data2[21] = 1'b0;
end 
// data2[ 20 ]
initial
begin
	data2[20] = 1'b0;
end 
// data2[ 19 ]
initial
begin
	data2[19] = 1'b0;
end 
// data2[ 18 ]
initial
begin
	data2[18] = 1'b0;
end 
// data2[ 17 ]
initial
begin
	data2[17] = 1'b0;
end 
// data2[ 16 ]
initial
begin
	data2[16] = 1'b0;
end 
// data2[ 15 ]
initial
begin
	data2[15] = 1'b0;
end 
// data2[ 14 ]
initial
begin
	data2[14] = 1'b0;
end 
// data2[ 13 ]
initial
begin
	data2[13] = 1'b0;
end 
// data2[ 12 ]
initial
begin
	data2[12] = 1'b0;
end 
// data2[ 11 ]
initial
begin
	data2[11] = 1'b0;
end 
// data2[ 10 ]
initial
begin
	data2[10] = 1'b0;
end 
// data2[ 9 ]
initial
begin
	data2[9] = 1'b0;
end 
// data2[ 8 ]
initial
begin
	data2[8] = 1'b0;
end 
// data2[ 7 ]
initial
begin
	data2[7] = 1'b0;
end 
// data2[ 6 ]
initial
begin
	data2[6] = 1'b0;
end 
// data2[ 5 ]
initial
begin
	data2[5] = 1'b0;
end 
// data2[ 4 ]
initial
begin
	data2[4] = 1'b0;
end 
// data2[ 3 ]
initial
begin
	data2[3] = 1'b0;
end 
// data2[ 2 ]
initial
begin
	data2[2] = 1'b0;
end 
// data2[ 1 ]
initial
begin
	data2[1] = 1'b0;
end 
// data2[ 0 ]
initial
begin
	data2[0] = 1'b0;
end 
// extenderOutputA[ 31 ]
initial
begin
	extenderOutputA[31] = 1'b1;
end 
// extenderOutputA[ 30 ]
initial
begin
	extenderOutputA[30] = 1'b1;
end 
// extenderOutputA[ 29 ]
initial
begin
	extenderOutputA[29] = 1'b1;
end 
// extenderOutputA[ 28 ]
initial
begin
	extenderOutputA[28] = 1'b1;
end 
// extenderOutputA[ 27 ]
initial
begin
	extenderOutputA[27] = 1'b1;
end 
// extenderOutputA[ 26 ]
initial
begin
	extenderOutputA[26] = 1'b1;
end 
// extenderOutputA[ 25 ]
initial
begin
	extenderOutputA[25] = 1'b1;
end 
// extenderOutputA[ 24 ]
initial
begin
	extenderOutputA[24] = 1'b1;
end 
// extenderOutputA[ 23 ]
initial
begin
	extenderOutputA[23] = 1'b1;
end 
// extenderOutputA[ 22 ]
initial
begin
	extenderOutputA[22] = 1'b1;
end 
// extenderOutputA[ 21 ]
initial
begin
	extenderOutputA[21] = 1'b1;
end 
// extenderOutputA[ 20 ]
initial
begin
	extenderOutputA[20] = 1'b1;
end 
// extenderOutputA[ 19 ]
initial
begin
	extenderOutputA[19] = 1'b1;
end 
// extenderOutputA[ 18 ]
initial
begin
	extenderOutputA[18] = 1'b1;
end 
// extenderOutputA[ 17 ]
initial
begin
	extenderOutputA[17] = 1'b1;
end 
// extenderOutputA[ 16 ]
initial
begin
	extenderOutputA[16] = 1'b1;
end 
// extenderOutputA[ 15 ]
initial
begin
	extenderOutputA[15] = 1'b1;
end 
// extenderOutputA[ 14 ]
initial
begin
	extenderOutputA[14] = 1'b1;
end 
// extenderOutputA[ 13 ]
initial
begin
	extenderOutputA[13] = 1'b1;
end 
// extenderOutputA[ 12 ]
initial
begin
	extenderOutputA[12] = 1'b1;
end 
// extenderOutputA[ 11 ]
initial
begin
	extenderOutputA[11] = 1'b1;
end 
// extenderOutputA[ 10 ]
initial
begin
	extenderOutputA[10] = 1'b1;
end 
// extenderOutputA[ 9 ]
initial
begin
	extenderOutputA[9] = 1'b1;
end 
// extenderOutputA[ 8 ]
initial
begin
	extenderOutputA[8] = 1'b1;
end 
// extenderOutputA[ 7 ]
initial
begin
	extenderOutputA[7] = 1'b1;
end 
// extenderOutputA[ 6 ]
initial
begin
	extenderOutputA[6] = 1'b1;
end 
// extenderOutputA[ 5 ]
initial
begin
	extenderOutputA[5] = 1'b1;
end 
// extenderOutputA[ 4 ]
initial
begin
	extenderOutputA[4] = 1'b1;
end 
// extenderOutputA[ 3 ]
initial
begin
	extenderOutputA[3] = 1'b1;
end 
// extenderOutputA[ 2 ]
initial
begin
	extenderOutputA[2] = 1'b1;
end 
// extenderOutputA[ 1 ]
initial
begin
	extenderOutputA[1] = 1'b1;
end 
// extenderOutputA[ 0 ]
initial
begin
	extenderOutputA[0] = 1'b1;
end 
endmodule


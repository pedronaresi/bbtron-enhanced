// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2017 19:50:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          signExtenderJ
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module signExtenderJ_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [25:0] inputB;
// wires                                               
wire [31:0] extenderOutputB;

// assign statements (if any)                          
signExtenderJ i1 (
// port map - connection between master ports and signals/registers   
	.extenderOutputB(extenderOutputB),
	.inputB(inputB)
);
initial 
begin 
#1000000 $finish;
end 
// inputB[ 25 ]
initial
begin
	inputB[25] = 1'b0;
end 
// inputB[ 24 ]
initial
begin
	inputB[24] = 1'b0;
end 
// inputB[ 23 ]
initial
begin
	inputB[23] = 1'b0;
end 
// inputB[ 22 ]
initial
begin
	inputB[22] = 1'b0;
end 
// inputB[ 21 ]
initial
begin
	inputB[21] = 1'b0;
end 
// inputB[ 20 ]
initial
begin
	inputB[20] = 1'b0;
end 
// inputB[ 19 ]
initial
begin
	inputB[19] = 1'b0;
end 
// inputB[ 18 ]
initial
begin
	inputB[18] = 1'b0;
end 
// inputB[ 17 ]
initial
begin
	inputB[17] = 1'b0;
end 
// inputB[ 16 ]
initial
begin
	inputB[16] = 1'b0;
end 
// inputB[ 15 ]
initial
begin
	inputB[15] = 1'b0;
end 
// inputB[ 14 ]
initial
begin
	inputB[14] = 1'b0;
end 
// inputB[ 13 ]
initial
begin
	inputB[13] = 1'b0;
end 
// inputB[ 12 ]
initial
begin
	inputB[12] = 1'b0;
end 
// inputB[ 11 ]
initial
begin
	inputB[11] = 1'b0;
end 
// inputB[ 10 ]
initial
begin
	inputB[10] = 1'b0;
end 
// inputB[ 9 ]
initial
begin
	inputB[9] = 1'b0;
end 
// inputB[ 8 ]
initial
begin
	inputB[8] = 1'b0;
end 
// inputB[ 7 ]
initial
begin
	inputB[7] = 1'b0;
end 
// inputB[ 6 ]
initial
begin
	inputB[6] = 1'b0;
end 
// inputB[ 5 ]
initial
begin
	inputB[5] = 1'b0;
end 
// inputB[ 4 ]
initial
begin
	inputB[4] = 1'b0;
end 
// inputB[ 3 ]
initial
begin
	inputB[3] = 1'b0;
end 
// inputB[ 2 ]
initial
begin
	inputB[2] = 1'b0;
end 
// inputB[ 1 ]
initial
begin
	inputB[1] = 1'b1;
end 
// inputB[ 0 ]
initial
begin
	inputB[0] = 1'b0;
end 
endmodule


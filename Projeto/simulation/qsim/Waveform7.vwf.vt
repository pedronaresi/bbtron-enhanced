// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2017 20:29:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          muxMemtoReg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module muxMemtoReg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] aluOut;
reg cu_memtoReg;
reg [31:0] dataRAMOutput;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
muxMemtoReg i1 (
// port map - connection between master ports and signals/registers   
	.aluOut(aluOut),
	.cu_memtoReg(cu_memtoReg),
	.dataRAMOutput(dataRAMOutput),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 
// aluOut[ 31 ]
initial
begin
	aluOut[31] = 1'b1;
end 
// aluOut[ 30 ]
initial
begin
	aluOut[30] = 1'b1;
end 
// aluOut[ 29 ]
initial
begin
	aluOut[29] = 1'b1;
end 
// aluOut[ 28 ]
initial
begin
	aluOut[28] = 1'b1;
end 
// aluOut[ 27 ]
initial
begin
	aluOut[27] = 1'b1;
end 
// aluOut[ 26 ]
initial
begin
	aluOut[26] = 1'b1;
end 
// aluOut[ 25 ]
initial
begin
	aluOut[25] = 1'b1;
end 
// aluOut[ 24 ]
initial
begin
	aluOut[24] = 1'b1;
end 
// aluOut[ 23 ]
initial
begin
	aluOut[23] = 1'b1;
end 
// aluOut[ 22 ]
initial
begin
	aluOut[22] = 1'b1;
end 
// aluOut[ 21 ]
initial
begin
	aluOut[21] = 1'b1;
end 
// aluOut[ 20 ]
initial
begin
	aluOut[20] = 1'b1;
end 
// aluOut[ 19 ]
initial
begin
	aluOut[19] = 1'b1;
end 
// aluOut[ 18 ]
initial
begin
	aluOut[18] = 1'b1;
end 
// aluOut[ 17 ]
initial
begin
	aluOut[17] = 1'b1;
end 
// aluOut[ 16 ]
initial
begin
	aluOut[16] = 1'b1;
end 
// aluOut[ 15 ]
initial
begin
	aluOut[15] = 1'b1;
end 
// aluOut[ 14 ]
initial
begin
	aluOut[14] = 1'b1;
end 
// aluOut[ 13 ]
initial
begin
	aluOut[13] = 1'b1;
end 
// aluOut[ 12 ]
initial
begin
	aluOut[12] = 1'b1;
end 
// aluOut[ 11 ]
initial
begin
	aluOut[11] = 1'b1;
end 
// aluOut[ 10 ]
initial
begin
	aluOut[10] = 1'b1;
end 
// aluOut[ 9 ]
initial
begin
	aluOut[9] = 1'b1;
end 
// aluOut[ 8 ]
initial
begin
	aluOut[8] = 1'b1;
end 
// aluOut[ 7 ]
initial
begin
	aluOut[7] = 1'b1;
end 
// aluOut[ 6 ]
initial
begin
	aluOut[6] = 1'b1;
end 
// aluOut[ 5 ]
initial
begin
	aluOut[5] = 1'b1;
end 
// aluOut[ 4 ]
initial
begin
	aluOut[4] = 1'b1;
end 
// aluOut[ 3 ]
initial
begin
	aluOut[3] = 1'b1;
end 
// aluOut[ 2 ]
initial
begin
	aluOut[2] = 1'b1;
end 
// aluOut[ 1 ]
initial
begin
	aluOut[1] = 1'b1;
end 
// aluOut[ 0 ]
initial
begin
	aluOut[0] = 1'b1;
end 

// cu_memtoReg
initial
begin
	cu_memtoReg = 1'b0;
	cu_memtoReg = #80000 1'b1;
	cu_memtoReg = #50000 1'b0;
end 
// dataRAMOutput[ 31 ]
initial
begin
	dataRAMOutput[31] = 1'b1;
end 
// dataRAMOutput[ 30 ]
initial
begin
	dataRAMOutput[30] = 1'b0;
end 
// dataRAMOutput[ 29 ]
initial
begin
	dataRAMOutput[29] = 1'b0;
end 
// dataRAMOutput[ 28 ]
initial
begin
	dataRAMOutput[28] = 1'b0;
end 
// dataRAMOutput[ 27 ]
initial
begin
	dataRAMOutput[27] = 1'b0;
end 
// dataRAMOutput[ 26 ]
initial
begin
	dataRAMOutput[26] = 1'b0;
end 
// dataRAMOutput[ 25 ]
initial
begin
	dataRAMOutput[25] = 1'b0;
end 
// dataRAMOutput[ 24 ]
initial
begin
	dataRAMOutput[24] = 1'b0;
end 
// dataRAMOutput[ 23 ]
initial
begin
	dataRAMOutput[23] = 1'b0;
end 
// dataRAMOutput[ 22 ]
initial
begin
	dataRAMOutput[22] = 1'b0;
end 
// dataRAMOutput[ 21 ]
initial
begin
	dataRAMOutput[21] = 1'b0;
end 
// dataRAMOutput[ 20 ]
initial
begin
	dataRAMOutput[20] = 1'b0;
end 
// dataRAMOutput[ 19 ]
initial
begin
	dataRAMOutput[19] = 1'b0;
end 
// dataRAMOutput[ 18 ]
initial
begin
	dataRAMOutput[18] = 1'b0;
end 
// dataRAMOutput[ 17 ]
initial
begin
	dataRAMOutput[17] = 1'b0;
end 
// dataRAMOutput[ 16 ]
initial
begin
	dataRAMOutput[16] = 1'b0;
end 
// dataRAMOutput[ 15 ]
initial
begin
	dataRAMOutput[15] = 1'b0;
end 
// dataRAMOutput[ 14 ]
initial
begin
	dataRAMOutput[14] = 1'b0;
end 
// dataRAMOutput[ 13 ]
initial
begin
	dataRAMOutput[13] = 1'b0;
end 
// dataRAMOutput[ 12 ]
initial
begin
	dataRAMOutput[12] = 1'b0;
end 
// dataRAMOutput[ 11 ]
initial
begin
	dataRAMOutput[11] = 1'b0;
end 
// dataRAMOutput[ 10 ]
initial
begin
	dataRAMOutput[10] = 1'b0;
end 
// dataRAMOutput[ 9 ]
initial
begin
	dataRAMOutput[9] = 1'b0;
end 
// dataRAMOutput[ 8 ]
initial
begin
	dataRAMOutput[8] = 1'b0;
end 
// dataRAMOutput[ 7 ]
initial
begin
	dataRAMOutput[7] = 1'b0;
end 
// dataRAMOutput[ 6 ]
initial
begin
	dataRAMOutput[6] = 1'b0;
end 
// dataRAMOutput[ 5 ]
initial
begin
	dataRAMOutput[5] = 1'b0;
end 
// dataRAMOutput[ 4 ]
initial
begin
	dataRAMOutput[4] = 1'b0;
end 
// dataRAMOutput[ 3 ]
initial
begin
	dataRAMOutput[3] = 1'b0;
end 
// dataRAMOutput[ 2 ]
initial
begin
	dataRAMOutput[2] = 1'b0;
end 
// dataRAMOutput[ 1 ]
initial
begin
	dataRAMOutput[1] = 1'b0;
end 
// dataRAMOutput[ 0 ]
initial
begin
	dataRAMOutput[0] = 1'b0;
end 
endmodule

